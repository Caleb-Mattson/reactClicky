{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","components/Title/index.js","App.js","index.js"],"names":["FriendCard","props","className","id","alt","name","src","image","onClick","Wrapper","children","Title","App","shuffleFunc","data","i","length","randomizer","Math","floor","random","temp","console","log","checkCondition","pic","state","clicked","find","storedId","gameLoss","score","increaseScore","gameWin","concat","push","setState","shuffleCards","pictures","hiScore","click","bind","this","alert","gameReset","map","friend","key","Component","ReactDOM","render","document","getElementById"],"mappings":"sxEAaeA,MAVf,SAAoBC,GAClB,OACE,yBAAKC,UAAU,QAEX,yBAAKC,GAAI,SAAWF,EAAME,GAAIC,IAAKH,EAAMI,KAAMC,IAAKL,EAAMM,MAAOC,QAASP,EAAMO,Y,MCAzEC,MAJf,SAAiBR,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMS,W,MCG1BC,MAJf,SAAeV,GACb,OAAO,wBAAIC,UAAU,SAASD,EAAMS,W,OCsKvBE,E,kDAhHb,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IAgBRY,YAAc,SAAAC,GAEZ,IADA,IAAIC,EAAID,EAAKE,OAAS,EACfD,EAAI,GAAG,CACZ,IAAME,EAAaC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IAC7CM,EAAOP,EAAKC,GAClBD,EAAKC,GAAKD,EAAKG,GACfH,EAAKG,GAAcI,EACnBC,QAAQC,IAAIF,GACZN,IAGF,OAAOD,GA5BU,EAmDnBU,eAAiB,SAAAC,GAAQ,IACftB,EAAOsB,EAAPtB,GAKR,GAJkB,EAAKuB,MAAMC,QAAQC,MAAK,SAAAC,GAExC,OADAP,QAAQC,IAAI,cAAgBM,GACrBA,IAAa1B,KAGpB,EAAK2B,gBACA,GAAyB,KAArB,EAAKJ,MAAMK,MACpB,EAAKC,gBACL,EAAKC,cACA,CAAC,IACAN,EAAY,EAAKD,MAAjBC,SACNA,EAAU,GAAGO,OAAOP,IACZQ,KAAKhC,GACb,EAAKiC,SAAS,CAACT,YACf,EAAKK,gBACL,EAAKK,iBAlEP,EAAKX,MACL,CACEY,WACAP,MAAO,EACPQ,QAAS,EACTZ,QAAS,IAEX,EAAKU,eACL,EAAKG,MAAQ,EAAKA,MAAMC,KAAX,gBAVI,E,2DAiCjB,OAAOC,KAAKN,SAAS,CAACE,SAAUI,KAAK7B,YAAY6B,KAAKhB,MAAMY,c,sCAKxDI,KAAKhB,MAAMK,QAAUW,KAAKhB,MAAMa,SAClCG,KAAKN,SAAS,CAACG,QAASG,KAAKhB,MAAMa,QAAU,IAC7CG,KAAKN,SAAS,CAACL,MAAOW,KAAKhB,MAAMK,MAAQ,KAEzCW,KAAKN,SAAS,CAACL,MAAOW,KAAKhB,MAAMK,MAAQ,IAE3CT,QAAQC,IAAI,iB,4BAGRE,GACJiB,KAAKlB,eAAeC,K,kCAyBpBiB,KAAKN,SAAS,CACZL,MAAO,EACPJ,QAAS,KAEXe,KAAKL,iB,iCAILM,MAAM,aACND,KAAKE,c,gCAILD,MAAM,YACND,KAAKE,c,+BAKG,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,eAAc,8BAAOF,KAAKhB,MAAMK,OAAhC,kBAA4D,8BAAOW,KAAKhB,MAAMa,UAC9E,yBAAKrC,UAAU,aACZwC,KAAKhB,MAAMY,SAASO,KAAI,SAAAC,GACvB,OAAQ,kBAAC,EAAD,CACNtC,QAAS,WAAQ,EAAKgC,MAAMM,IAC5B3C,GAAI2C,EAAO3C,GACX4C,IAAKD,EAAO3C,GACZE,KAAMyC,EAAOzC,KACbE,MAAOuC,EAAOvC,iB,GA3JVyC,a,MCDlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.05ed2e4b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  return (\n    <div className=\"card\">\n      \n        <img id={\"image-\" + props.id} alt={props.name} src={props.image} onClick={props.onClick} />\n      \n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport pictures from \"./friends.json\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n\n\n\n  // state = {\n  //   friends,\n  //   score: 0,\n  //   hiScore: 0,\n  //   clicked: []\n  // };\n\n  //   componentDidMount() {\n  //     this.displayImage();\n  //   }\n\n  //   displayImage() {\n  //     this.setState({friends: this.shuffleFunc(this.state.friends)})\n  //   }\n\n  //  shuffleFunc = data => {\n  //     let i = data.length - 1;\n  //     while (i > 0) {\n  //       const randomizer = Math.floor(Math.random() * (i + 1));\n  //       const temp = data[i];\n  //       data[i] = data[randomizer];\n  //       data[randomizer] = temp;\n  //       console.log(temp);\n  //       i--;\n  //     }\n\n  //     return data;\n\n  //   }\n\n  //   gamePlay() {\n  //     const {id} = this.state.friends\n  //     if (this.state.friends.isClicked === true) {\n\n  //       this.state.score.setState(0);\n  //       this.state.friends.map( friend => {\n  //         return friend.isClicked.setState(false);\n  //       });\n  //       this.displayImage();\n  //     } else {\n\n  //       const findId = this.state.friends.id.find(id)\n  //       console.log(findId)\n  //       this.displayImage();\n  //     }\n  //   } \n\n  constructor(props) {\n    super(props)\n    this.state =\n    {\n      pictures,\n      score: 0,\n      hiScore: 0,\n      clicked: []\n    };\n    this.shuffleCards();\n    this.click = this.click.bind(this)\n  };\n\n//  componentDidMount() {\n//     this.shuffleCards(this.state.pictures)\n//   } \n\n  shuffleFunc = data => {\n    let i = data.length - 1;\n    while (i > 0) {\n      const randomizer = Math.floor(Math.random() * (i + 1));\n      const temp = data[i];\n      data[i] = data[randomizer];\n      data[randomizer] = temp;\n      console.log(temp);\n      i--;\n    }\n\n    return data;\n\n  }\n\n  shuffleCards() {\n    return this.setState({pictures: this.shuffleFunc(this.state.pictures)})\n  }\n\n  increaseScore(){\n    \n    if (this.state.score === this.state.hiScore) {\n      this.setState({hiScore: this.state.hiScore + 1})\n      this.setState({score: this.state.score + 1})\n    } else {\n      this.setState({score: this.state.score + 1})\n    }\n    console.log(\"WOO POINTS!\")\n  }\n\n  click(pic) {\n    this.checkCondition(pic);\n  }\n\n  checkCondition = pic => {\n    const { id } = pic;\n    const isClicked = this.state.clicked.find(storedId => {\n      console.log(\"Stored ID: \" + storedId);\n      return storedId === id;\n    });\n    if (isClicked) {\n      this.gameLoss();\n    } else if (this.state.score === 11) {\n      this.increaseScore();\n      this.gameWin();\n    } else {\n      let { clicked } = this.state;\n      clicked = [].concat(clicked);\n      clicked.push(id);\n      this.setState({clicked});\n      this.increaseScore();\n      this.shuffleCards();\n    }\n  }\n\n  gameReset() {\n    this.setState({\n      score: 0,\n      clicked: []\n    });\n    this.shuffleCards();\n  }\n\n  gameLoss() {\n    alert(`You lost.`)\n    this.gameReset();\n  }\n\n  gameWin() {\n    alert(`You won!`)\n    this.gameReset();\n  }\n\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Title>Score: <span>{this.state.score}</span> | High-Score: <span>{this.state.hiScore}</span></Title>\n        <div className=\"container\">\n          {this.state.pictures.map(friend => {\n            return (<FriendCard\n              onClick={() => { this.click(friend) }}\n              id={friend.id}\n              key={friend.id}\n              name={friend.name}\n              image={friend.image}\n            />)\n          })}\n        </div>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}